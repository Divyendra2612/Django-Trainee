Yes, by default, Django signals run within the same database transaction as the caller. However, there is an exception: signals like post_save and post_delete are triggered after the transaction is committed when ATOMIC_REQUESTS=True is enabled.

Proof with Code
We will:

Create a User instance inside an atomic transaction.

Trigger an exception after the save operation.

Check if the user is committed to the database.
from django.db import transaction
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth.models import User

@receiver(post_save, sender=User)
def signal_handler(sender, instance, **kwargs):
    print("Signal handler executed. Checking if user exists in DB...")
    exists = User.objects.filter(id=instance.id).exists()
    print(f"User exists in DB inside signal? {exists}")

# Simulating a transaction with an exception
if __name__ == "__main__":
    try:
        with transaction.atomic():
            user = User(username="testuser")
            user.save()
            print("User saved. Raising error...")
            raise Exception("Simulating an error after save")
    except Exception as e:
        print(f"Exception caught: {e}")

    # Check if the user was actually saved
    user_exists = User.objects.filter(username="testuser").exists()
    print(f"User exists in DB after transaction rollback? {user_exists}")
